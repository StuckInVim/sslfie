#!/bin/sh

show_usage() {
    echo "Usage: sslfie [OPTION]... DOMAIN [DOMAIN2]...

Generate a self-signed x.509 certificate for use with SSL/TLS.

Options:
  -o PATH -- output the cert to a file at PATH
  -k PATH -- output the key to a file at PATH
  -c CC   -- country code listed in the cert (default: XX)
  -s SIZE -- generate a key of size SIZE (default: 2048)
  -y N    -- expire cert after N years (default: 10)"
}

main() {
    local C SUBJECT_ALT_NAME
    local cert cert_out expires_years key_out key_path key_size result
    C=XX
    expires_years=10
    key_size=2048

    local OPTIND
    while getopts ho:k:c:s:y: opt; do
        case "$opt" in
            h) show_usage; exit ;;
            o) cert_out="$OPTARG" ;;
            k) key_out="$OPTARG" ;;
            c) C="$OPTARG" ;;
            s) key_size="$OPTARG" ;;
            y) expires_years="$OPTARG" ;;
        esac
    done
    shift $(( OPTIND - 1 ))

    if [ $# -eq 0 ]; then
        show_usage
        exit
    fi

    SUBJECT_ALT_NAME=$(join_commas $(map_subject "$@"))

    key_path=$(make_tempfile)                               &&
    (umask 077; generate_key "$key_size" >| "$key_path")    &&

    cert=$(C="$C" \
        CN="$1" \
        SUBJECT_ALT_NAME="$SUBJECT_ALT_NAME" \
        KEY="$key_path" \
        DAYS=$(( 365 * expires_years )) \
        generate_cert)                                      &&

    printf '%s\n' "$cert" | output "$cert_out"              &&
    output "$key_out" < "$key_path"                         &&

    rm -- "$key_path"
}

join_commas() {
    (IFS=,; printf '%s\n' "$*")
}

map_subject() {
    while [ $# -gt 0 ]; do
        printf '%s\n' "DNS:$1"
        shift
    done
}

generate_key() {
    openssl genrsa "$1" 2>/dev/null
}

generate_cert() {
    local cfg
    cfg=$(make_tempfile)                                                &&
    printf '%s' "$config_template" >| "$cfg"                            &&

    C="$C" CN="$CN" SUBJECT_ALT_NAME="$SUBJECT_ALT_NAME" \
        openssl req -config "$cfg" -new -x509 -key "$KEY" -days "$DAYS" &&

    rm -f -- "$cfg"
}

config_template="[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no

[req_distinguished_name]
C = \$ENV::C
CN = \$ENV::CN

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = \$ENV::SUBJECT_ALT_NAME
"

output() {
    if [ -z "$1" ]; then
        cat
    else
        cat >| "$1"
    fi
}

make_tempfile() {
    mktemp -t sslfie.XXXXXX
}

main "$@"
